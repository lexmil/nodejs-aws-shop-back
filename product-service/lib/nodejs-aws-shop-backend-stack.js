"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodejsAwsShopBackendStack = void 0;
const cdk = require("aws-cdk-lib");
const dotenv = require("dotenv");
const lambda = require("aws-cdk-lib/aws-lambda");
const nodejs = require("aws-cdk-lib/aws-lambda-nodejs");
const apigateway = require("aws-cdk-lib/aws-apigateway");
const dynamodb = require("aws-cdk-lib/aws-dynamodb");
const aws_sns_1 = require("aws-cdk-lib/aws-sns");
const aws_sqs_1 = require("aws-cdk-lib/aws-sqs");
const aws_sns_subscriptions_1 = require("aws-cdk-lib/aws-sns-subscriptions");
const aws_lambda_event_sources_1 = require("aws-cdk-lib/aws-lambda-event-sources");
const path = require("path");
dotenv.config({ path: "../.env" });
class NodejsAwsShopBackendStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const IMPORT_SERVICE_QUEUE_NAME = process.env.IMPORT_SERVICE_QUEUE_NAME;
        if (!IMPORT_SERVICE_QUEUE_NAME) {
            throw new Error("IMPORT_SERVICE_QUEUE_NAME environment variable is not set");
        }
        const productsTable = new dynamodb.Table(this, "ProductsTable", {
            tableName: "products",
            partitionKey: { name: "id", type: dynamodb.AttributeType.STRING },
            removalPolicy: cdk.RemovalPolicy.DESTROY, // Changed to DESTROY for easy cleanup
            billingMode: dynamodb.BillingMode.PROVISIONED,
            readCapacity: 1, // Minimum possible value
            writeCapacity: 1, // Minimum possible value
        });
        const stocksTable = new dynamodb.Table(this, "StocksTable", {
            tableName: "stocks",
            partitionKey: { name: "product_id", type: dynamodb.AttributeType.STRING },
            removalPolicy: cdk.RemovalPolicy.DESTROY,
            billingMode: dynamodb.BillingMode.PROVISIONED,
            readCapacity: 1,
            writeCapacity: 1,
        });
        const catalogItemsQueue = new aws_sqs_1.Queue(this, "CatalogItemsQueue", {
            queueName: IMPORT_SERVICE_QUEUE_NAME,
        });
        const createProductTopic = new aws_sns_1.Topic(this, "CreateProductTopic", {
            topicName: "createProductTopic",
        });
        // Add email subscription
        createProductTopic.addSubscription(new aws_sns_subscriptions_1.EmailSubscription("a.milashchenkov@softteco.com", {
            filterPolicy: {
                price: aws_sns_1.SubscriptionFilter.numericFilter({
                    greaterThanOrEqualTo: 100,
                }),
            },
        }));
        createProductTopic.addSubscription(new aws_sns_subscriptions_1.EmailSubscription("encode.cpp@gmail.com", {
            filterPolicy: {
                price: aws_sns_1.SubscriptionFilter.numericFilter({
                    lessThanOrEqualTo: 100,
                }),
            },
        }));
        const catalogBatchProcess = new nodejs.NodejsFunction(this, "CatalogBatchProcess", {
            runtime: lambda.Runtime.NODEJS_20_X,
            handler: "index.handler",
            entry: path.join(__dirname, "../lambda/catalogBatchProcess/index.ts"),
            bundling: {
                externalModules: [],
                minify: true,
                sourceMap: false,
            },
            environment: {
                SNS_TOPIC_ARN: createProductTopic.topicArn,
                PRODUCTS_TABLE: productsTable.tableName,
                STOCKS_TABLE: stocksTable.tableName,
            },
        });
        createProductTopic.grantPublish(catalogBatchProcess);
        catalogBatchProcess.addEventSource(new aws_lambda_event_sources_1.SqsEventSource(catalogItemsQueue, {
            batchSize: 5,
        }));
        const api = new apigateway.RestApi(this, "NodejsAwsShopApi", {
            restApiName: "Shop Service",
            description: "This is the Shop API",
            defaultCorsPreflightOptions: {
                allowOrigins: apigateway.Cors.ALL_ORIGINS,
                allowMethods: apigateway.Cors.ALL_METHODS,
                allowHeaders: apigateway.Cors.DEFAULT_HEADERS,
            },
        });
        // Lambda functions
        const getProductsListFunction = new nodejs.NodejsFunction(this, "getProductsList", {
            bundling: {
                externalModules: [],
                minify: true,
                sourceMap: false,
            },
            runtime: lambda.Runtime.NODEJS_20_X,
            handler: "index.handler",
            entry: path.join(__dirname, "../lambda/getProductsList/index.ts"),
            environment: {
                PRODUCTS_TABLE: productsTable.tableName,
                STOCKS_TABLE: stocksTable.tableName,
                REGION: cdk.Stack.of(this).region,
                POWERTOOLS_SERVICE_NAME: "productService",
                POWERTOOLS_METRICS_NAMESPACE: "ProductsApp",
                LOG_LEVEL: "INFO",
            },
        });
        const getProductsByIdFunction = new nodejs.NodejsFunction(this, "getProductsById", {
            bundling: {
                externalModules: [],
                minify: true,
                sourceMap: false,
            },
            runtime: lambda.Runtime.NODEJS_20_X,
            handler: "index.handler",
            entry: path.join(__dirname, "../lambda/getProductsById/index.ts"),
            environment: {
                PRODUCTS_TABLE: productsTable.tableName,
                STOCKS_TABLE: stocksTable.tableName,
                REGION: cdk.Stack.of(this).region,
            },
        });
        const createProductFunction = new nodejs.NodejsFunction(this, "createProduct", {
            bundling: {
                externalModules: [],
                minify: true,
                sourceMap: false,
            },
            runtime: lambda.Runtime.NODEJS_20_X,
            handler: "index.handler",
            entry: path.join(__dirname, "../lambda/createProduct/index.ts"),
            environment: {
                PRODUCTS_TABLE: productsTable.tableName,
                STOCKS_TABLE: stocksTable.tableName,
                REGION: cdk.Stack.of(this).region,
            },
        });
        // Grant permissions to Lambda
        productsTable.grantReadData(getProductsListFunction);
        productsTable.grantReadData(getProductsByIdFunction);
        productsTable.grantWriteData(createProductFunction);
        productsTable.grantWriteData(catalogBatchProcess);
        stocksTable.grantReadData(getProductsListFunction);
        stocksTable.grantReadData(getProductsByIdFunction);
        stocksTable.grantWriteData(createProductFunction);
        stocksTable.grantWriteData(catalogBatchProcess);
        createProductTopic.grantPublish(catalogBatchProcess);
        catalogItemsQueue.grantConsumeMessages(catalogBatchProcess);
        const products = api.root.addResource("products");
        products.addMethod("GET", new apigateway.LambdaIntegration(getProductsListFunction, {
            proxy: true,
            requestTemplates: {
                "application/json": '{ "statusCode": "200" }',
            },
        }));
        products.addMethod("POST", new apigateway.LambdaIntegration(createProductFunction, {
            proxy: true,
        }));
        const product = products.addResource("{id}");
        product.addMethod("GET", new apigateway.LambdaIntegration(new nodejs.NodejsFunction(this, "getProductsByIdGet", {
            runtime: lambda.Runtime.NODEJS_20_X,
            handler: "index.handler",
            entry: path.join(__dirname, "../lambda/getProductsById/index.ts"),
        }), {
            proxy: true,
        }));
        // Add API Gateway response (optional)
        api.addGatewayResponse("DefaultError", {
            type: apigateway.ResponseType.DEFAULT_4XX,
            responseHeaders: {
                "Access-Control-Allow-Origin": "'*'",
            },
        });
        // Output the API URL
        new cdk.CfnOutput(this, "ApiUrl", {
            value: api.url,
            description: "API Gateway URL",
        });
    }
}
exports.NodejsAwsShopBackendStack = NodejsAwsShopBackendStack;
//# sourceMappingURL=data:application/json;base64,