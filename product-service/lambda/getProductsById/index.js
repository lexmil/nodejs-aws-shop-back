"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const logger_1 = require("@aws-lambda-powertools/logger");
const metrics_1 = require("@aws-lambda-powertools/metrics");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const logger = new logger_1.Logger({
    serviceName: 'productService',
    logLevel: 'INFO'
});
const metrics = new metrics_1.Metrics({
    namespace: 'ProductsApp',
    serviceName: 'productService',
    defaultDimensions: {
        environment: process.env.ENVIRONMENT || 'development'
    }
});
const client = new client_dynamodb_1.DynamoDBClient({
    region: process.env.REGION
});
const docClient = lib_dynamodb_1.DynamoDBDocumentClient.from(client);
const createResponse = (statusCode, body) => ({
    statusCode,
    headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Credentials': true,
    },
    body: JSON.stringify(body)
});
const handler = async (event) => {
    logger.addContext(event);
    const productId = event.pathParameters?.id;
    try {
        logger.info('Getting product by ID', {
            operation: 'getProductById',
            productId
        });
        metrics.addMetric('getProductByIdInvocations', metrics_1.MetricUnit.Count, 1);
        if (!productId) {
            logger.error('Missing product ID');
            metrics.addMetric('missingProductIdErrors', metrics_1.MetricUnit.Count, 1);
            return createResponse(400, { message: 'Missing product ID' });
        }
        // Get product
        const productParams = {
            TableName: process.env.PRODUCTS_TABLE,
            Key: { id: productId }
        };
        const productCommand = new lib_dynamodb_1.GetCommand(productParams);
        const productResponse = await docClient.send(productCommand);
        if (!productResponse.Item) {
            logger.info('Product not found', { productId });
            metrics.addMetric('productNotFound', metrics_1.MetricUnit.Count, 1);
            return createResponse(404, {
                message: 'Product not found'
            });
        }
        // Get stock
        const stockParams = {
            TableName: process.env.STOCKS_TABLE,
            Key: { product_id: productId }
        };
        const stockCommand = new lib_dynamodb_1.GetCommand(stockParams);
        const stockResponse = await docClient.send(stockCommand);
        const product = productResponse.Item;
        const stock = stockResponse.Item;
        const response = {
            ...product,
            count: stock?.count || 0
        };
        logger.info('Successfully retrieved product', {
            productId,
            hasStock: !!stock
        });
        metrics.addMetric('successfulProductRetrieval', metrics_1.MetricUnit.Count, 1);
        return createResponse(200, response);
    }
    catch (error) {
        logger.error('Error getting product', {
            productId,
            error: error.message,
            errorName: error.name,
            stackTrace: error.stack
        });
        metrics.addMetric('productRetrievalErrors', metrics_1.MetricUnit.Count, 1);
        return createResponse(500, {
            message: 'Internal server error while fetching product',
            error: process.env.IS_OFFLINE ? error.message : 'Internal server error'
        });
    }
    finally {
        metrics.publishStoredMetrics();
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,