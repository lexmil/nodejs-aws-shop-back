"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../index");
const products_1 = require("../../../mock/products");
describe("getProductsById Lambda", () => {
    let mockEvent;
    beforeEach(() => {
        mockEvent = {
            httpMethod: "GET",
            path: "/products/1",
            headers: {},
            queryStringParameters: null,
            pathParameters: { id: "1" },
            body: null,
            isBase64Encoded: false,
            requestContext: {},
            multiValueHeaders: {},
            multiValueQueryStringParameters: null,
            stageVariables: null,
            resource: "",
        };
    });
    it("should return specific product when valid ID is provided", async () => {
        const expectedProduct = products_1.default.find((p) => p.id === "1");
        const response = await (0, index_1.handler)(mockEvent);
        expect(response.statusCode).toBe(200);
        expect(response.headers).toEqual({
            "Content-Type": "application/json",
        });
        expect(JSON.parse(response.body)).toEqual(expectedProduct);
    });
    it("should return 400 when product is not found", async () => {
        mockEvent.pathParameters = { id: "nonexistent" };
        const response = await (0, index_1.handler)(mockEvent);
        expect(response.statusCode).toBe(400);
        expect(response.headers).toEqual({
            "Content-Type": "application/json",
        });
        expect(JSON.parse(response.body)).toEqual({
            message: "Product not found",
        });
    });
    it("should return 400 when no ID is provided", async () => {
        mockEvent.pathParameters = null;
        const response = await (0, index_1.handler)(mockEvent);
        expect(response.statusCode).toBe(400);
        expect(response.headers).toEqual({
            "Content-Type": "application/json",
        });
        expect(JSON.parse(response.body)).toEqual({
            message: "Product not found",
        });
    });
    it("should handle errors and return 500", async () => {
        // Mock products import to simulate error
        jest.mock("../../../mock/products", () => {
            throw new Error("Failed to load products");
        });
        const response = await (0, index_1.handler)(mockEvent);
        expect(response.statusCode).toBe(500);
        expect(response.headers).toEqual({
            "Content-Type": "application/json",
        });
        expect(JSON.parse(response.body)).toEqual({
            message: "Internal server error",
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluZGV4LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxvQ0FBbUM7QUFDbkMscURBQThDO0FBRTlDLFFBQVEsQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7SUFDdEMsSUFBSSxTQUErQixDQUFDO0lBRXBDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxTQUFTLEdBQUc7WUFDVixVQUFVLEVBQUUsS0FBSztZQUNqQixJQUFJLEVBQUUsYUFBYTtZQUNuQixPQUFPLEVBQUUsRUFBRTtZQUNYLHFCQUFxQixFQUFFLElBQUk7WUFDM0IsY0FBYyxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRTtZQUMzQixJQUFJLEVBQUUsSUFBSTtZQUNWLGVBQWUsRUFBRSxLQUFLO1lBQ3RCLGNBQWMsRUFBRSxFQUFTO1lBQ3pCLGlCQUFpQixFQUFFLEVBQUU7WUFDckIsK0JBQStCLEVBQUUsSUFBSTtZQUNyQyxjQUFjLEVBQUUsSUFBSTtZQUNwQixRQUFRLEVBQUUsRUFBRTtTQUNiLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywwREFBMEQsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN4RSxNQUFNLGVBQWUsR0FBRyxrQkFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUMzRCxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUEsZUFBTyxFQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQy9CLGNBQWMsRUFBRSxrQkFBa0I7U0FDbkMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzdELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzNELFNBQVMsQ0FBQyxjQUFjLEdBQUcsRUFBRSxFQUFFLEVBQUUsYUFBYSxFQUFFLENBQUM7UUFDakQsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFBLGVBQU8sRUFBQyxTQUFTLENBQUMsQ0FBQztRQUUxQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUMvQixjQUFjLEVBQUUsa0JBQWtCO1NBQ25DLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUN4QyxPQUFPLEVBQUUsbUJBQW1CO1NBQzdCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDBDQUEwQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3hELFNBQVMsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBQSxlQUFPLEVBQUMsU0FBUyxDQUFDLENBQUM7UUFFMUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDL0IsY0FBYyxFQUFFLGtCQUFrQjtTQUNuQyxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDeEMsT0FBTyxFQUFFLG1CQUFtQjtTQUM3QixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNuRCx5Q0FBeUM7UUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7WUFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFBLGVBQU8sRUFBQyxTQUFTLENBQUMsQ0FBQztRQUUxQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUMvQixjQUFjLEVBQUUsa0JBQWtCO1NBQ25DLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUN4QyxPQUFPLEVBQUUsdUJBQXVCO1NBQ2pDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUElHYXRld2F5UHJveHlFdmVudCB9IGZyb20gXCJhd3MtbGFtYmRhXCI7XG5pbXBvcnQgeyBoYW5kbGVyIH0gZnJvbSBcIi4uL2luZGV4XCI7XG5pbXBvcnQgcHJvZHVjdHMgZnJvbSBcIi4uLy4uLy4uL21vY2svcHJvZHVjdHNcIjtcblxuZGVzY3JpYmUoXCJnZXRQcm9kdWN0c0J5SWQgTGFtYmRhXCIsICgpID0+IHtcbiAgbGV0IG1vY2tFdmVudDogQVBJR2F0ZXdheVByb3h5RXZlbnQ7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgbW9ja0V2ZW50ID0ge1xuICAgICAgaHR0cE1ldGhvZDogXCJHRVRcIixcbiAgICAgIHBhdGg6IFwiL3Byb2R1Y3RzLzFcIixcbiAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgcXVlcnlTdHJpbmdQYXJhbWV0ZXJzOiBudWxsLFxuICAgICAgcGF0aFBhcmFtZXRlcnM6IHsgaWQ6IFwiMVwiIH0sXG4gICAgICBib2R5OiBudWxsLFxuICAgICAgaXNCYXNlNjRFbmNvZGVkOiBmYWxzZSxcbiAgICAgIHJlcXVlc3RDb250ZXh0OiB7fSBhcyBhbnksXG4gICAgICBtdWx0aVZhbHVlSGVhZGVyczoge30sXG4gICAgICBtdWx0aVZhbHVlUXVlcnlTdHJpbmdQYXJhbWV0ZXJzOiBudWxsLFxuICAgICAgc3RhZ2VWYXJpYWJsZXM6IG51bGwsXG4gICAgICByZXNvdXJjZTogXCJcIixcbiAgICB9O1xuICB9KTtcblxuICBpdChcInNob3VsZCByZXR1cm4gc3BlY2lmaWMgcHJvZHVjdCB3aGVuIHZhbGlkIElEIGlzIHByb3ZpZGVkXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBleHBlY3RlZFByb2R1Y3QgPSBwcm9kdWN0cy5maW5kKChwKSA9PiBwLmlkID09PSBcIjFcIik7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBoYW5kbGVyKG1vY2tFdmVudCk7XG5cbiAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG9CZSgyMDApO1xuICAgIGV4cGVjdChyZXNwb25zZS5oZWFkZXJzKS50b0VxdWFsKHtcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH0pO1xuICAgIGV4cGVjdChKU09OLnBhcnNlKHJlc3BvbnNlLmJvZHkpKS50b0VxdWFsKGV4cGVjdGVkUHJvZHVjdCk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIHJldHVybiA0MDAgd2hlbiBwcm9kdWN0IGlzIG5vdCBmb3VuZFwiLCBhc3luYyAoKSA9PiB7XG4gICAgbW9ja0V2ZW50LnBhdGhQYXJhbWV0ZXJzID0geyBpZDogXCJub25leGlzdGVudFwiIH07XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBoYW5kbGVyKG1vY2tFdmVudCk7XG5cbiAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzQ29kZSkudG9CZSg0MDApO1xuICAgIGV4cGVjdChyZXNwb25zZS5oZWFkZXJzKS50b0VxdWFsKHtcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH0pO1xuICAgIGV4cGVjdChKU09OLnBhcnNlKHJlc3BvbnNlLmJvZHkpKS50b0VxdWFsKHtcbiAgICAgIG1lc3NhZ2U6IFwiUHJvZHVjdCBub3QgZm91bmRcIixcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoXCJzaG91bGQgcmV0dXJuIDQwMCB3aGVuIG5vIElEIGlzIHByb3ZpZGVkXCIsIGFzeW5jICgpID0+IHtcbiAgICBtb2NrRXZlbnQucGF0aFBhcmFtZXRlcnMgPSBudWxsO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgaGFuZGxlcihtb2NrRXZlbnQpO1xuXG4gICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1c0NvZGUpLnRvQmUoNDAwKTtcbiAgICBleHBlY3QocmVzcG9uc2UuaGVhZGVycykudG9FcXVhbCh7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9KTtcbiAgICBleHBlY3QoSlNPTi5wYXJzZShyZXNwb25zZS5ib2R5KSkudG9FcXVhbCh7XG4gICAgICBtZXNzYWdlOiBcIlByb2R1Y3Qgbm90IGZvdW5kXCIsXG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KFwic2hvdWxkIGhhbmRsZSBlcnJvcnMgYW5kIHJldHVybiA1MDBcIiwgYXN5bmMgKCkgPT4ge1xuICAgIC8vIE1vY2sgcHJvZHVjdHMgaW1wb3J0IHRvIHNpbXVsYXRlIGVycm9yXG4gICAgamVzdC5tb2NrKFwiLi4vLi4vLi4vbW9jay9wcm9kdWN0c1wiLCAoKSA9PiB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gbG9hZCBwcm9kdWN0c1wiKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgaGFuZGxlcihtb2NrRXZlbnQpO1xuXG4gICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1c0NvZGUpLnRvQmUoNTAwKTtcbiAgICBleHBlY3QocmVzcG9uc2UuaGVhZGVycykudG9FcXVhbCh7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9KTtcbiAgICBleHBlY3QoSlNPTi5wYXJzZShyZXNwb25zZS5ib2R5KSkudG9FcXVhbCh7XG4gICAgICBtZXNzYWdlOiBcIkludGVybmFsIHNlcnZlciBlcnJvclwiLFxuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19