"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const logger_1 = require("@aws-lambda-powertools/logger");
const metrics_1 = require("@aws-lambda-powertools/metrics");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const logger = new logger_1.Logger({
    serviceName: 'productService',
    logLevel: 'INFO'
});
const metrics = new metrics_1.Metrics({
    namespace: 'ProductsApp',
    serviceName: 'productService',
    defaultDimensions: {
        environment: process.env.ENVIRONMENT || 'development'
    }
});
const client = new client_dynamodb_1.DynamoDBClient({
    region: process.env.REGION
});
const docClient = lib_dynamodb_1.DynamoDBDocumentClient.from(client);
const createResponse = (statusCode, body) => ({
    statusCode,
    headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Credentials': true,
    },
    body: JSON.stringify(body)
});
const handler = async (event) => {
    logger.addContext(event);
    try {
        logger.info('Getting products list', {
            operation: 'getProductsList'
        });
        metrics.addMetric('getProductsListInvocations', metrics_1.MetricUnit.Count, 1);
        // Get all products
        const productsParams = {
            TableName: process.env.PRODUCTS_TABLE,
        };
        const productsCommand = new lib_dynamodb_1.ScanCommand(productsParams);
        const productsResponse = await docClient.send(productsCommand);
        if (!productsResponse.Items || productsResponse.Items.length === 0) {
            logger.info('No products found');
            metrics.addMetric('emptyProductsList', metrics_1.MetricUnit.Count, 1);
            return createResponse(200, []);
        }
        // Get all stocks
        const stocksParams = {
            TableName: process.env.STOCKS_TABLE,
        };
        const stocksCommand = new lib_dynamodb_1.ScanCommand(stocksParams);
        const stocksResponse = await docClient.send(stocksCommand);
        const stocks = stocksResponse.Items;
        // Combine products with their stock information
        const products = productsResponse.Items;
        const productsWithStock = products.map(product => {
            const stockItem = stocks.find(stock => stock.product_id === product.id);
            return {
                ...product,
                count: stockItem ? stockItem.count : 0
            };
        });
        logger.info('Successfully retrieved products', {
            productCount: productsWithStock.length
        });
        metrics.addMetric('productsReturned', metrics_1.MetricUnit.Count, productsWithStock.length);
        return createResponse(200, productsWithStock);
    }
    catch (error) {
        logger.error('Error getting products list', {
            error: error.message,
            errorName: error.name,
            stackTrace: error.stack
        });
        metrics.addMetric('productsListErrors', metrics_1.MetricUnit.Count, 1);
        return createResponse(500, {
            message: 'Internal server error while fetching products',
            error: process.env.IS_OFFLINE ? error.message : 'Internal server error'
        });
    }
    finally {
        metrics.publishStoredMetrics();
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,